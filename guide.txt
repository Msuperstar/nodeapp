(1)ejs


"템플릿파일은 기본적으로 views파일을 기본으로 인식한다":고정하라는 이야기

ejs파일에서 script부분을 쓰면 <% %>감싸주어야함!!:매우 중요
:변수 ,조건문 ,파일 포함, 등등에서 쓰임=>모든 부분에 <% %>가 들어가는건 아님

퍼그 스타일은 태크에 <>를 사용하지 않고 들여쓰기로 각 태그를 구분
넌적스 스타일은 퍼그보다는 ejs문법에 가까우며 해당 데이터를 태그 적용하여 출력할 때 
<h1>{{title}}<h1>이런식으로 작성

ejs로 통일시키는 이유
<nav> </nav> 로 구성된 메뉴의 경우 모든 파일에 공통 내용이라서 nav만 별도로 분리해서 
각 ejs파일에 넣을 수 있으나 html파일이라면 이런 구조 분리가 불가능하다.
UI포맷의 통일을 위해서 ejs로 통일해야한다. 
동작에는 무리가 없을지 몰라도 코드가 통일성도 없고 오히려 가독성을 해칠 수 있다

//!!ejs템플릿을 이용시!!
//ejs파일명
//res.senfile은 단순히 파일의 내용을 전달하는 기능이라면
//render는 파일의 내용을 만들어내는 기능이다: 동적인 결과를 정적인 html에 표현
//그래서 가변적 데이터를 출력하는 렌더링의 의미로 별도의 render함수를 제공



(2)ajax





"ajax":javascript코드임 :script에 추가 필요
ajax란 웹 페이지에서 새로운 데이터를 요청할 때 웹 페이지 전체를
새로고침하지 않고 보여 주려는 데이터가 포함된 페이지 일부만 로드하기 위한 기법이다
ajax는 사용하기 위한 동작 방식에 맞추어 사용하면 전혀 문제가 되거나 어렵지 않음




(3)시멘틱 url


http에 붇는 게시물의 번호는 우리가 app.get(/~1)이런식으로 일일히
index를 붙여줄 수 없으니까 그대신에 번호에 대해 라우터가 가변적으로 처리할 수 있어야함
이를 위해 사용하는 방법이 시맨틱 url


+
 <script>
        $.ajax({
          //type:요청 방식
          //url:요청 경로
          //data:서버로 보낼 데이터
          type:"post",
          url:'/delete',
          data: {id:10}
        }).done(function(result){
          //응답에 성공했을때 
        }).fail(function(xhr, testStatus, errorThrown){
          //응답에 실패했을때
        })
    </script>


     // 여기에서 데이터 삭제 또는 처리 로직을 수행
    const deletedPostIndex = post.findIndex(post => post.id == postId);
    //postID는 list.js에서 받아옴
    //mydb.findIndex임
    //뒤에서 post는 요청방식이고 앞에는 db이름을 의미
    if (deletedPostIndex !== -1) {
      data.splice(deletedPostIndex, 1);
      res.status(200); //.send('게시물이 성공적으로 삭제되었습니다.');
      console.log(req.body[postId])
    } else {
      res.status(404).send('게시물을 찾을 수 없습니다.');
    }
  });

    /*
  app.post("/delete",function(req,res){
    console.log(req.body);
    console.log('삭제완료');
})
*/



(4)<sha256>



암호화란 평문을 암호문으로 변환하는 과정
사용자가 입력한 데이터를 알아볼 수 없는 데이터로 변경
다시 평문으로 변환하는건 복호화라고함

(1)단방향
복호화가 불가능한 데이터: 데이터의 무결성을 검증할 때 사용
무결성이 뭥미?

(2)양방향
복호화 가능한 데이터

//npm install sha256
//const sha require('sha256');
//sha('1111')


(5)
//html:정적파일=>동적인 데이터 반영:ejs
//express에서는 이미지나 css와 같은 정적인 파일을 제공하기 위해 
//express.static미들 웨어 함수를 사용할 수 있다
//public은 디렉토리 이름으로 관습적으로 public을 사용한다. 
//이렇게 하면 정적 파일의 루트 지점은 public이 됨
//app.use로 시작하면 무조건 미들 웨어 이다.
//앞서 body-parser사용할떄 사용한적이 있다.
